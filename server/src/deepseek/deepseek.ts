import OpenAI from 'openai';
import dotenv from 'dotenv';
import axios from 'axios';
import * as cheerio from 'cheerio';

dotenv.config();

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const SERP_API_KEY = process.env.SERP_API_KEY;

if (!DEEPSEEK_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
}
if (!SERP_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SERP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
}

const openai = new OpenAI({
  baseURL: 'https://api.deepseek.com',
  apiKey: DEEPSEEK_API_KEY,
});

export interface DeepSeekResponse {
  message: string;
  history?: Array<{ role: string; content: string }>;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
 * @param query –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
 */
export async function fetchInternetData(query: string): Promise<string> {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: "${query}"`);

    if (!SERP_API_KEY) {
      console.error('‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á SerpAPI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å .env');
      return '‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
    }

    const response = await axios.get(`https://serpapi.com/search`, {
      params: {
        api_key: SERP_API_KEY,
        q: query,
        num: 3,
      },
    });

    const results = response.data.organic_results;
    if (!results || results.length === 0) {
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.';
    }

    let extractedData = '';
    for (const result of results) {
      try {
        console.log(`üìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å: ${result.link}`);
        const pageResponse = await axios.get(result.link);
        const $ = cheerio.load(pageResponse.data);

        let pageText = '';
        $('p, span, div').each((_, el) => {
          const text = $(el).text().trim();
          if (text.length > 20 && text.length < 300) {
            pageText += `- ${text}\n`;
          }
        });

        if (pageText) {
          extractedData += `üîπ **${result.title}**: \n${pageText}\nüîó [–ò—Å—Ç–æ—á–Ω–∏–∫](${result.link})\n\n`;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${result.link}:`, error);
      }
    }

    return (
      extractedData ||
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.'
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:', error);
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
 * @param city –ì–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è.
 * @returns –í—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.
 */
async function getWorldTime(city: string): Promise<string> {
  try {
    console.log(`‚è∞ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è: ${city}`);

    const response = await axios.get(
      `http://worldtimeapi.org/api/timezone/Europe/${city}`,
    );
    const { datetime } = response.data;
    const time = new Date(datetime).toLocaleTimeString('ru-RU');

    return `‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ${city}: ${time}`;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.';
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫.
 * @param message –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å.
 * @returns true, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫.
 */
function requiresInternetSearch(message: string): boolean {
  const searchTriggers = [
    '–Ω–æ–≤–æ—Å—Ç–∏',
    '–∫—É—Ä—Å',
    '–ø–æ–≥–æ–¥–∞',
    '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
    '–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–∞',
    '—Å–æ–±—ã—Ç–∏—è',
    '–±–∏–æ–≥—Ä–∞—Ñ–∏—è',
    '–∏—Å—Ç–æ—Ä–∏—è',
  ];

  const isSimpleQuestion = /(–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º)\s/.test(
    message.toLowerCase(),
  );
  const isFactualQuestion = /(—Å–∫–æ–ª—å–∫–æ|–∫—Ç–æ|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è)\s/.test(
    message.toLowerCase(),
  );

  return (
    searchTriggers.some((trigger) => message.toLowerCase().includes(trigger)) ||
    (isFactualQuestion && !isSimpleQuestion)
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DeepSeek API —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
 * @param message –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param history –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
 * @returns –û—Ç–≤–µ—Ç –æ—Ç DeepSeek API.
 */
export async function sendMessageToDeepSeek(
  message: string,
  history: Array<{ role: string; content: string }> = [],
): Promise<DeepSeekResponse> {
  try {
    let additionalData = '';

    if (message.toLowerCase().includes('–≤—Ä–µ–º—è –≤')) {
      const cityMatch = message.match(/–≤—Ä–µ–º—è –≤\s+(.+)/i);
      const city = cityMatch ? cityMatch[1].trim() : 'Moscow';
      additionalData = await getWorldTime(city);
    } else if (requiresInternetSearch(message)) {
      additionalData = await fetchInternetData(message);
    }

    history = history.slice(-10);
    history.push({ role: 'user', content: message });

    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: 'system',
        content:
          '–¢—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.',
      },
      ...history.map((msg) => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content,
      })),
      { role: 'user', content: message },
    ];

    const completion = await openai.chat.completions.create({
      messages,
      model: 'deepseek-chat',
    });

    let botResponse =
      completion.choices[0]?.message?.content ||
      '‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç DeepSeek API.';

    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    if (botResponse.includes('```')) {
      botResponse = botResponse.replace(/```([\s\S]+?)```/g, '```\n$1\n```');
    }

    return {
      message: botResponse,
      history: [...history, { role: 'assistant', content: botResponse }],
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek API:', error);
    throw error;
  }
}
