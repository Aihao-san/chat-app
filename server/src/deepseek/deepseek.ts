import OpenAI from 'openai';
import dotenv from 'dotenv';
import axios from 'axios';
import * as cheerio from 'cheerio';

dotenv.config();

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const SERP_API_KEY = process.env.SERP_API_KEY;

if (!DEEPSEEK_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
}
if (!SERP_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SERP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!');
}

const openai = new OpenAI({
  baseURL: 'https://api.deepseek.com',
  apiKey: DEEPSEEK_API_KEY,
});

export interface DeepSeekResponse {
  message: string;
  history?: Array<{ role: string; content: string }>;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.
 * @param query –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.
 */
export async function fetchWeatherData(query: string): Promise<string> {
  try {
    console.log(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);

    if (!SERP_API_KEY) {
      console.error('‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á SerpAPI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å .env');
      return '‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
    }

    console.log(
      `üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–∫–ª—é—á: ${SERP_API_KEY.substring(0, 5)}********`,
    );

    const response = await axios.get(`https://serpapi.com/search`, {
      params: {
        api_key: SERP_API_KEY,
        q: query,
        num: 3,
      },
    });

    console.log('üåç –û—Ç–≤–µ—Ç –æ—Ç SerpAPI:', response.data);

    const results = response.data.organic_results;

    if (!results || results.length === 0) {
      return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.';
    }

    let weatherData = '';
    for (const result of results) {
      try {
        console.log(`üìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å: ${result.link}`);
        const pageResponse = await axios.get(result.link);
        const $ = cheerio.load(pageResponse.data);

        let extractedWeather = '';
        $('p, span, div').each((_, el) => {
          const text = $(el).text().trim();
          if (
            /—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|¬∞C|–æ—Å–∞–¥–∫–∏|–≤–µ—Ç–µ—Ä|–¥–∞–≤–ª–µ–Ω–∏–µ|–≤–ª–∞–∂–Ω–æ—Å—Ç—å/.test(
              text.toLowerCase(),
            )
          ) {
            extractedWeather += `- ${text}\n`;
          }
        });

        if (extractedWeather) {
          weatherData += `üîπ **${result.title}**: \n${extractedWeather}\nüîó [–ò—Å—Ç–æ—á–Ω–∏–∫](${result.link})\n\n`;
        }
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å ${result.link}:`,
          error,
        );
      }
    }

    return weatherData || '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.';
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:', error);
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.';
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DeepSeek API —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
 * @param message –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param history –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞.
 * @returns –û—Ç–≤–µ—Ç –æ—Ç DeepSeek API.
 */
export async function sendMessageToDeepSeek(
  message: string,
  history: Array<{ role: string; content: string }> = [],
): Promise<DeepSeekResponse> {
  try {
    let weatherData = '';

    if (
      message.toLowerCase().includes('–ø–æ–≥–æ–¥–∞') ||
      message.toLowerCase().includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') ||
      message.toLowerCase().includes('–æ—Å–∞–¥–∫–∏') ||
      message.toLowerCase().includes('–≤–µ—Ç–µ—Ä') ||
      message.toLowerCase().includes('–¥–∞–≤–ª–µ–Ω–∏–µ') ||
      message.toLowerCase().includes('–≤–ª–∞–∂–Ω–æ—Å—Ç—å')
    ) {
      console.log('üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!');
      weatherData = await fetchWeatherData(message);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
    if (history.length > 10) {
      history = history.slice(-10);
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª "–∞ –≤ –ü–∏—Ç–µ—Ä–µ?", –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ä–µ—á—å –æ –ø–æ–≥–æ–¥–µ
    const lastUserMessage =
      history.length > 0
        ? history[history.length - 1].content.toLowerCase()
        : '';
    if (message.toLowerCase().includes('–∞ –≤')) {
      const lastCityMatch = lastUserMessage.match(/–≤ (\w+)/);
      if (lastCityMatch) {
        message = `–ø–æ–≥–æ–¥–∞ –≤ ${lastCityMatch[1]}`;
      }
    }

    history.push({ role: 'user', content: message });

    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role: 'system',
        content:
          '–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –≤–∫–ª—é—á–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –æ—Å–∞–¥–∫–∏, –≤–µ—Ç–µ—Ä –∏ –¥–∞–≤–ª–µ–Ω–∏–µ.',
      },
      ...history.map((msg) => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content,
      })),
      { role: 'user', content: message },
    ];

    if (weatherData) {
      console.log(
        'üåç –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å –∫ DeepSeek:',
        weatherData,
      );
      messages.push({
        role: 'system',
        content: `–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ:\n${weatherData}\n\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.`,
      });
    }

    console.log(
      'üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek API:',
      JSON.stringify(messages, null, 2),
    );

    const completion = await openai.chat.completions.create({
      messages,
      model: 'deepseek-chat',
    });

    if (!completion.choices[0]?.message?.content) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API');
    }

    const response = {
      message: completion.choices[0].message.content,
      history: [
        ...history,
        { role: 'assistant', content: completion.choices[0].message.content },
      ],
    };

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek API:', response);
    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API DeepSeek:', error);
    throw error;
  }
}
